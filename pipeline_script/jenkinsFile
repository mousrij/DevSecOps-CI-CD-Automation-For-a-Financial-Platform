/*
So our pipeline is with our pipeline, that we going to list right Here 

    Stages : (6)
    
            - Checkout scm (built in with SCM config)
    - then make a sonarqube scan 
    - Inaugurate a quality gate threshold of the scan analysis
    - Build the image
    - scan the image with trivy
    - Push the image to ECR repository (verify if the ECR exist)
    - Clean Up the images exist in the jenkins server

    Define : 

        - Tools         -- jdk
        - Parameters    -- ECR repo name && aws account Id 
        - Environment


*/



pipeline {
    agent any
    
    parameters {
        string(name: 'ECR_REPO_NAME', defaultValue: 'budget-project', description: 'Enter repository name')
        string(name: 'AWS_ACCOUNT_ID', defaultValue: '151826481606', description: 'Enter repository name')
    }

    tools {
        jdk 'JDK17'
        nodejs 'NodeJS'
    }

    environment {
        SCANNER_HOME = tool 'SonarQube Scanner'
    }

    stages {
        stage('1. SonarQube scan') {
            steps {
                withSonarQubeEnv ('sonar-server') {
                    sh """
                    $SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.projectName=budget-project \
                    -Dsonar.projectKey=budget-project
                    """
                }
            }
        }

        // Quality Gate
        stage('2. Quality Gate') {
            steps {
                waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
            }
        }

        // Build Container 
        stage('3. Build Container') {
            steps {
                sh """
                    docker build -t ${params.ECR_REPO_NAME} .
                """
            }
        }

        // Scan image
        stage('4. Trivy Scan Container') {
            steps { 
                sh """
                    trivy image -f json -o results.json ${params.ECR_REPO_NAME}
                    cat results.json
                """
            }
        }

        // Check and Create ECR repository if it doesn't exist
        stage('5. ECR Repository Check/Create') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws_access_key_id', variable: 'AWS_ACCESS_KEY'),
                    string(credentialsId: 'aws_secret_access_key', variable: 'AWS_SECRET_KEY')
                ]) {
                    script {
                        // Export credentials for AWS CLI
                        withEnv([
                            "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY",
                            "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_KEY",
                            "AWS_DEFAULT_REGION=eu-west-3"
                        ]) {
                            // Check if repo exists
                            def repoExists = sh(
                                script: """
                                    aws ecr describe-repositories \
                                        --repository-names ${params.ECR_REPO_NAME} \
                                        >/dev/null 2>&1
                                """,
                                returnStatus: true
                            )

                            if (repoExists == 0) {
                                echo "✅ ECR repository '${params.ECR_REPO_NAME}' already exists"
                            } else {
                                echo "❌ ECR repository '${params.ECR_REPO_NAME}' not found. Creating..."
                                sh """
                                    aws ecr create-repository \
                                        --repository-name ${params.ECR_REPO_NAME} \
                                        --region eu-west-3
                                """
                                echo "✅ ECR repository '${params.ECR_REPO_NAME}' created successfully"
                            }
                        }
                    }
                }
            }
        }

        // Login to ECR and Push Image
        stage('6. Tag and Push to ECR') {
            steps {
                withCredentials(
                    [string(credentialsId: 'aws_access_key_id', variable: 'AWS_ACCESS_KEY'), 
                     string(credentialsId: 'aws_secret_access_key', variable: 'AWS_SECRET_KEY')]
                ) {
                    script {
                        def ecrRegistry = "${params.AWS_ACCOUNT_ID}.dkr.ecr.eu-west-3.amazonaws.com"
                        def imageTag_latest = "${ecrRegistry}/${params.ECR_REPO_NAME}:latest"
                        def imageTag_build_number = "${ecrRegistry}/${params.ECR_REPO_NAME}:${BUILD_NUMBER}"
                        
                        sh """
                            # Login to ECR
                            aws ecr get-login-password --region eu-west-3 | docker login --username AWS --password-stdin ${ecrRegistry}
                            
                            # Tag the image for ECR

                            docker tag ${params.ECR_REPO_NAME} ${imageTag_build_number}
                            docker tag ${params.ECR_REPO_NAME} ${imageTag_latest}
                            
                            # Push the image to ECR
                            docker push ${imageTag_build_number}
                            docker push ${imageTag_latest}
                            
                            echo "✅ Image pushed successfully to ECR: ${imageTag_latest}"
                        """
                    }
                }
            }
        }
        
        // Clean up local Docker images
        stage('7. Cleanup') {
            steps {
                sh """
                    # Remove local Docker images to free up space
                    docker rmi ${params.ECR_REPO_NAME} || true
                    docker rmi ${params.AWS_ACCOUNT_ID}.dkr.ecr.eu-west-3.amazonaws.com/${params.ECR_REPO_NAME}:latest || true
                    docker rmi ${params.AWS_ACCOUNT_ID}.dkr.ecr.eu-west-3.amazonaws.com/${params.ECR_REPO_NAME}:${BUILD_NUMBER} || true
                    
                    # Clean up dangling images
                    docker images
                    
                    echo "✅ Local Docker images cleaned up"
                """
            }
        }

        //Update k8s deployment manifest file
        stage('8. Image Updater'){
            steps {
                withCredentials([usernamePassword(credentialsId: 'jenkins-scm', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]){
                    sh """
                        git config --global user.email 'jenkins@ec2-user.com'
                        git config --global user.name 'jenkins-server'
                        git clone -b pipeline_script https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/mousrij/DevSecOps-CI-CD-Automation-For-a-Financial-Platform.git
                        cd DevSecOps-CI-CD-Automation-For-a-Financial-Platform/k8s

                        # Update the deployment image tag to the current build number, regardless of previous tag
                        sed -i "s#\\(image: [^:]*:\\)\\w*#\\1${BUILD_NUMBER}#" deployments.yaml

                        git add deployments.yaml
                        git commit -m "Update deployment image tag to build ${BUILD_NUMBER} [ci skip]"
                        git push origin pipeline_script
                    """
                }
            }

        }
    }
}
