/*
So our pipeline is with our pipeline, that we going to list right Here 

    Stages : (6)
    
            - Checkout scm (built in with SCM config)
    - then make a sonarqube scan 
    - Inaugurate a quality gate threshold of the scan analysis
    - Build the image
    - scan the image with trivy
    - Push the image to ECR repository (verify if the ECR exist)
    - Clean Up the images exist in the jenkins server

    Define : 

        - Tools         -- jdk
        - Parameters    -- ECR repo name && aws account Id 
        - Environment


*/



pipeline {
    agent any
    
    parameters {
        string(name: 'ECR_REPO_NAME', defaultValue: 'budget-project', description: 'Enter repository name')
        string(name: 'AWS_ACCOUNT_ID', defaultValue: 'budget-project', description: 'Enter repository name')
    }

    tools {
        jdk 'JDK17'
        nodejs 'NodeJS'
    }

    environment {
        SCANNER_HOME = tool 'SonarQube Scanner'
    }

    stages {
        stage('1. SonarQube scan') {
            steps {
                withSonarQubeEnv ('sonar-server') {
                    sh """
                    $SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.projectName=budget-project \
                    -Dsonar.projectKey=budget-project
                    """
                }
            }
        }
        // Quality Gate
        stage('2. Quality Gate') {
            steps {
                waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
            }
        }

        // Build Container 
        stage('3. Build Container') {
            steps {
                sh """
                    docker build -t ${params.ECR_REPO_NAME} .
                """
            }
        }

        // Scan image

        stage('4. Trivy Scan Container') {
            steps { 
                sh """
                    trivy image -f json -o results.json ${params.ECR_REPO_NAME}
                    cat results.json
                """
            }
        }

    }
    



}
